

web:httpd,nginx,tengine
     静态页面，动态页面(php,python,perl)

常用的组合:
1.nginx+php
2.tomcat+java


java SE 标准版
java EE 企业版
下载java 下载文件jdk
jdk:工具箱  jdk或者openjdk 最好下载openjdk
    java解释器
     打包 war,jar
    java[一套生态，完善，完整]类库(提供大量的函数和代码)
            circle 点  半径  就能画一个园
               图片处理
shell:写程序1行 ping
python:写程序2行
java:写程序10行
C:写程序1000行
jre:是jdk的子集
    java虚拟机
    java核心类库和支持文件
Java      Servlet(java扩展web服务器功能的组件规范)
IBM       websphere
Oracle    weblogic
Apache    tomcat
RedHat    Jboss


Tomcat服务器

部署Tomcat服务器软件(192.168.2.100/24)

1）使用RPM安装JDK环境
[root@web1 ~]# yum –y install  java-1.8.0-openjdk                //安装JDK
[root@web1 ~]# yum –y install java-1.8.0-openjdk-headless        //安装JDK
[root@web1 ~]# java –version                                    //查看JAVA版本

2）安装Tomcat
[root@web1 ~]# tar -xzf  apache-tomcat-8.0.30.tar.gz
[root@web1 ~]# mv apache-tomcat-8.0.30  /usr/local/tomcat
[root@web1 ~]# ls /usr/local/tomcat
bin/                                            //主程序目录
lib/                                            //库文件目录
logs/                                          //日志目录  
temp/                                         //临时目录
work/                                        //自动编译目录jsp代码转换servlet
conf/                                        //配置文件目录
webapps/                                        //页面目录

修改Tomcat配置文件

1）创建测试JSP页面
[root@web1 ~]# vim  /usr/local/tomcat/webapps/ROOT/test.jsp
<html>
<body>
<center>
Now time is: <%=new java.util.Date()%>            //显示服务器当前时间
</center>
</body>
</html>

2）启动服务
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh
[root@web1 ~]# firewall-cmd --set-default-zone=trusted
[root@web1 ~]# setenforce 0

验证测试

1）服务器验证端口信息
[root@web1 ~]# netstat -nutlp |grep java        //查看java监听的端口
tcp        0      0 :::8080              :::*                LISTEN      2778/java           
tcp        0      0 ::ffff:127.0.0.1:8005     :::*         LISTEN       2778/java           

2）客户端浏览测试页面
[root@client ~]# firefox http://127.0.0.1:8080
[root@client ~]# firefox http://127.0.0.1:8080/test.jsp

8005端口启动的慢
读取/dev/random  /dev/urandom的随机数   strings /dev/random(/dev/urandom)
解决方案: mv /dev/random /dev/random.bak
        ln -s /dev.urandom /dev/random



使用Tomcat部署虚拟主机

问题

沿用练习二，使用Tomcat部署加密虚拟主机，实现以下要求：
实现两个基于域名的虚拟主机，域名分别为：www.aa.com和 www.bb.com
使用www.aa.com域名访问的页面根路径为/usr/local/tomcat/aa/ROOT
使用www.bb.com域名访问的页面根路径为/usr/local/tomcat/bb/base
访问www.aa.com/test时，页面自动跳转到/var/www/html目录下的页面
访问页面时支持SSL加密通讯
私钥、证书存储路径为/usr/local/tomcat/conf/cert
每个虚拟主机都拥有独立的访问日志文件
配置tomcat集群环境

方案

修改server.xml配置文件，创建两个域名的虚拟主机，修改如下两个参数块：
# cat /usr/local/tomcat/conf/server.xml
… …
<Host name=www.aa.com appBase="aa" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
</Host>
… …
提示：修改server.xml配置文件，通过在<Host>中添加Context，我们也可以指定页面的根路径位置，默认为ROOT
<Context path="/test" docBase="/var/www/html/" />
使用keytool命令可以生成SSL密钥与证书文件
#keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore

步骤

实现此案例需要按照如下步骤进行。
步骤一：配置服务器虚拟主机

1）修改server.xml配置文件，创建虚拟主机
[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
</Host>

2）创建虚拟主机对应的页面根路径
[root@web1 ~]# mkdir -p  /usr/local/tomcat/{aa,bb}/ROOT
[root@web1 ~]# echo "AAA"   > /usr/local/tomcat/aa/ROOT/index.html
[root@web1 ~]# echo "BBB" > /usr/local/tomcat/bb/ROOT/index.html

3）重启Tomcat服务器
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

4）客户端设置host文件，并浏览测试页面进行测试
[root@client ~]# vim /etc/hosts
… …
192.168.2.100    www.aa.com  www.bb.com
[root@client ~]# firefox http://www.aa.com:8080/        //注意访问的端口为8080
[root@client ~]# firefox http://www.bb.com:8080/

修改www.bb.com网站的首页目录为base

1）使用docBase参数可以修改默认网站首页路径
[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" reloadable="true"/>
</Host>
… …
[root@web1 ~]# mkdir  /usr/local/tomcat/bb/base
[root@web1 ~]# echo "BASE" > /usr/local/tomcat/bb/base/index.html
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

2）测试查看页面是否正确
[root@client ~]# firefox http://www.bb.com:8080/    //结果为base目录下的页面内容

跳转

1）当用户访问http://www.aa.com/test打开/var/www/html目录下的页面
[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
<Context path="/test" docBase="/var/www/html/" />
</Host>
<Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" />
</Host>
… …
[root@web1 ~]# echo "Test" > /var/www/html/index.html
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

2）测试查看页面是否正确
[root@client ~]# firefox http://www.aa.com:8080/test    
//返回/var/www/html/index.html的内容
//注意，访问的端口为8080

配置Tomcat支持SSL加密网站

1）创建加密用的私钥和证书文件
[root@web1 ~]# keytool(只有系统中有jdk这个包才有) -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore                //提示输入密码为:123456
//-genkeypair     生成密钥对
//-alias tomcat     密钥别名
//-keyalg RSA     定义密钥算法为RSA算法
//-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore

2)再次修改server.xml配置文件，创建支持加密连接的Connector
[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false" sslProtocol="TLS" />
//备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可

3）重启Tomcat服务器
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

4）客户端设置host文件，并浏览测试页面进行测试
[root@client ~]# vim /etc/hosts
… …
192.168.2.100      www.aa.com  www.bb.com
[root@client ~]# firefox https://www.test.com:8443/
[root@client ~]# firefox https://www.test.com:8443/

小补：
vim /usr/local/tomcat/conf/server.xml
<server>
   <service>
      <connector port=8080 />
      <engine defaulthost=localhost>
             <host name=www.a.com></host>
             <host name=www.b.com></host>
      </engine>
   </service>
</server>

如：
<tom>                      或者       <tom age=33 phone=123 "niu niu niu" />
    age=33
    phone=123
    niu niu niu
</tom>


1）查看varnish日志
[root@proxy ~]# varnishlog                        //varnish日志
[root@proxy ~]# varnishncsa                    //访问日志

2）更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）。
[root@proxy ~]# varnishadm  ban.url 页面文件名
//清空缓存数据，支持正则表达式






































































