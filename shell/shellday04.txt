shellday04
一、字符串截取及切割
二、字符串初值的处理
三、shell数组
四、expect预期交互
五、使用正则表达式

字串的截取
用法:
echo ${变量名:起始位置:长度}
expr substr “$变量名” 起始位置 长度
echo $变量名 | cut -b 起始位置-结束位置

#phone=17791300113
#echo ${phone}
17791300113
#echo ${#phone}     变量的长度
11
#echo ${phone:0:3}    变量名：初始位置从0开始：长度
177



#vim /shell1/11.sh
n=$[ RANDOM%62 ]      随机取62个数中任意一个
x='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' 62个数
echo ${x:n:1}   输出一个x(62个数)中的数用n随机一个
:wq


取一个8位的密码

vim /shell1/12.sh
#bin/bash
x='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
for i in {1..8}                   i=0
do                                while [ $i -le 8 ]
    n=$[ RANDOM%62 ]              do
    y=${x:n:1}                       n=$[ RANDOM%62 ]              
    pass=$pass$y                     y=${x:n:1} 
done                                 pass=$pass$y
echo $pass                           let i++
                                  done
                                  echo $pass
 
字符替换
${变量名/旧值/新值}   替换第一个旧值
${变量名//旧值/新值}   全部替换


字串掐头去尾
   掐头：${变量名#不要的字符}  从左向右删除
        如：
         #echo ${x#root}  从左往右删除root
         #echo ${x#*:}    从左往右删除第一个：前的内容
         #echo ${x##*:}   从左往右删除最后一个：前的内容
   去尾：${变量名%不要的字符}  从右往左删除
        如：
         #echo ${x%/bin/bash}   从右往左删除/bin/bash
         #echo ${x%:*}          从右往左删除第一个：后的内容
         #echo ${x%%:*}         从右往左删除最后一个：后的内容

批量修改扩展名：
     如：#vim /shell1/13.sh
        for i in `ls *.$1`
        do
           mv $i ${i/$1/$2}
           n=${i/$1/$2}
           echo $n
        done


字符串初始值的案例
     echo ${变量名:-word} 查看变量是否存在，如果存在则输出变量值
                                                  如果不存在则显示"-word"的值
      如： #vim /shell1/14.sh
             read -p "请输入用户名：  " user
            read -p "请输入密码：  " pass
            if [ -z $user ];then
                 echo "请输入用户名！！" 
                 exit
            fi
            pass=${pass:-123456}          
              useradd $user
         echo $pass | passwd --stdin $user  


read -p "请输入数字： " num
如果num=10，则脚本计算1+2+3+4+5+6+7+8+9+10
如果num=50，则脚本计算1+2+3+4+5+6+7+8+9+10+``````+50
如果num没有数字，默认100，1+2+3+4+5+6+7+8+9+10+``````+100

#vim /shell1/15.sh
read -p "请输入一个数字：" num
i=1
y=0
num=${num:-100}
while [ $1 -le $num ]               for i in `seq $num`
do                                  do
  let i++                              let y+=i
  let y+=i                          done
done                                echo "总和是 $y"
echo "总和是 $y"
i=1,y=0+1=1
i=2,y=1+2=3
i=3,y=3+3=6(1+2+3)
i=4,y=6+4=10(1+2+3+4)
i=5,y=10+5=15(1+2+3+4+5)
i=6,y=15+6=21(1+2+3+4+5+6)


shell数组(一个变量里可以存储多了数组)
a=(11 22 33 ``````````````)
   0  1  2  3 `````````` n
echo ${a[0]} 取出11
echo ${a[1]} 取出22
echo ${a[2]} 取出33
``````````
echo ${a[n]} 取出n
echo ${a[*]} 取出所有


#vim /shell1/16.sh
#!/bin/bash
i=0
while :
do
   read -p "请输入一个IP" x
   [ "$x" == "EOF" ] && break
   ip[$i]=$x
   let i++
done
echo "${ip[*]},${ip[0]}"
 


expect预期(自动)交互   ssh自动交互密码

基本语法格式

发邮件的命令mail
#mail -s error root
asd      输入内容
wer
nmo    
.           结束
EOT

#echo "abc" | mail -s error root

#mail -s error root <<EOF(end of file)(<<导入从EOF开始，EOF结束) 
asd
wer
nmo
EOF


#vim/shell1/expect_ssh.sh
#!/bin/bash
expect <<EOF
spawn ssh 172.25.0.11
expect "password" {send "redhat\n"}
expect "#"        {send "touch a.txt\n"}
expect "#"        {send "exit\n"}
EOF
:wq


ssh -o StrictHostKeyChecking=no server0  
第一次连接不需要输入yes/no


正则表达式[特殊符号表示的共同属性的数据]

下列软件支持：
shell,python,java,php
vim,grep,sed,awk
word,excel,ps,AES
(计算机的通用表达式)


正则符号：
基本正则:
^            ：匹配行首  ^a
$            ：匹配行尾  a$
[ ]           ：集合，匹配集合中的任意单个字符  [ate9] [a-z]=[abcdefg....xyz]要a-z之间的任意一个
[^]           ：对集和取反   [^a-z]不要a-z，大写a-z与数字都可以
.            ：匹配任意单个字符  
*            ：匹配前一个字符任意次数 不能单独使用*，如： grep "a*" 文件名
.*            :匹配所有
\{n,m\}   ：匹配前一个字符n到m次
\{n,\}    ：匹配前一个字符n次及以上
\{n\}     ：匹配前一个字符n次
\(\)          :保留(复制)   \数字代表粘贴
扩展正则:
+           ：最少匹配一次
?            ：最多匹配一次
{n,m}     ：匹配n到m次
()           ：组合为整体，保留
|            ：或者
\b        ：单词边界 

grep -E '^root|^daemon'  /etc/passwd 相当于   egrep  '^root|^daemon' /etc/passwd
{1}      匹配一次
{1,3}    匹配1至3次

完整的电话号码精准匹配：
'^((13[0-9])|(15[0-9])|(17[0-9])|(18[0-9])|(199))([0-9]{8})$'
'^((1[3,5,7,8,9][0-9])|(14[5,7]))([0-9]{8}$)'

固话:
^(0[0-9]{2,3}\-)?     ([2-9][0-9]{6,7})+       (\-[0-9]{1,4})?$

邮箱:
^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$

\b:单词边界(单词前面用\b,只匹配the+后面内容的东西，单词后面用\b,只匹配前面内容+the,单词前后都有\b,只匹配the)
egrep "\bthe\b" test.txt
















