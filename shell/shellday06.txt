shellday06

awk文本过滤:列

awk [选项] '[条件]{指令}' 文件名
  print 是最常用的编辑指令；若有多条编辑指令，可用分号分隔。
   处理文本时，若未指定分隔符，则默认将空格、制表符等作为分隔符。   默认支持扩展正则
#awk '{print $1,$3}' test.txt  打印test.txt的第一列和第三列
#df -h | awk '{print $1,$4}'   打印所有分区的剩余容量


  -F:可以指定分隔符  如: awk -F: '{print $1,$4}' /etc/passwd   (指定以:作为分隔符)
                     awk -F: '{print $1,"的解释器是：",$7}' /etc/passwd
                                        可以输入常量需要用""引起来
                     awk -F[:/] '{print $1,$10}' /etc/passwd


   NF:列数(now feild)          
   NR:行数(now row)            如:awk -F: '{print NR,NF}'  /etc/passwd

利用awk提取
本机的网络流量
根分区剩余流量
获取远程失败的IP地址


#ifconfig eth0 | awk '/RX p|TX p/{print $5}'
   #ifconfig eth0 | awk '/RX p|TX p/{print $6,$7}'
#ifconfig eht0 | awk '/inet /{print $2}'
	
#df -h / | tail -1 | awk '{print $4}' 或者 #df -h / | awk '/\/$/{print $4}'

#tailf /var/log/secure  动态看日志

完整语法格式:
awk [选项] ' BEGIN{指令} {指令} END{指令}'  文件  可以一个一个打，三个都打也行，
   BEGIN{} 行前处理，读取文件内容之前执行，指令执行1次
    {} 逐行处理，读取文件过程中执行，指令执行n次(n取决与文件有多少行)
   END{} 行后处理，读取文件结束后执行，指令执行1次    
    允许变量不定义就可以用，数字为0，字符为空
awk 'BEGIN{x=1;print x*8}'  相当于  awk 'BEGIN{print 1*8}' (+-*/%都适用)
awk 'BEGIN{x=1;print x+1}'  相当于  awk 'BEGIN{print 1+1}'
awk 'BEGIN{x=1;print x/1}'  相当于  awk 'BEGIN{print 1/1}'
awk 'BEGIN{x=1;print x%1}'  相当于  awk 'BEGIN{print 1%1}'
awk 'BEGIN{x=1;print x-1}'  相当于  awk 'BEGIN{print 1-1}'
awk 'BEGIN{x=3.5;print x+2.5}'   相当于  awk 'BEGIN{print 3.5+2.5}'(小数也支持)
awk 'BEGIN{x=2;print x*2*2}'  相当于  awk 'BEGIN{print 2**3}'(2**3是2的3次方)  

统计系统中使用bash作为登录Shell的用户总个数：
awk 'BEGIN{x=0} /bash$/{x++} END{print x}' /etc/passwd


格式化输出passwd文件内容时，要求第一行为列表标题，中间打印用户的名称、UID、加目录信息，最后一行提示一共有多少个用户，
   
awk -F: 'BEGIN{print "User\tUid\tHome\t"}{print $1 "\t" $3 "\t" $6}END{print "Total" NR "lines"}' /etc/passwd | column -t

column -t  专门对齐

awk条件: (默认指令是打印print,想用print,后面不写默认全部{print},要打第几列就要写{print $列数})
1.正则设置条件
2.使用数字/字串的比较
3.逻辑测试条件
4.支持数字运算


1====> 全行 某一列 取反
        awk -F: '/bash$/' /etc/passwd  相当于  awk -F: '/bash$/{print}' /etc/passwd
        awk -F: '/root/' /etc/passwd
        awk -F: '/^(root|adm)/{print $1,$3}' /etc/passwd  过滤以root或者adm账户的账户名和UID信息
        awk -F: '$1~/root/' /etc/passwd  ($1~ 对第一列匹配   $列数~ 对第几列进行匹配)
        awk -F: '$7!~/nologin$/{print $1,$7}' /etc/passwd  不想要第七行以nologin结尾的用户，其他的都要


2====> (== >= > < <= !=)
        awk -F: 'NR==3'  /etc/passwd
        awk -F: '$3>=1000'  /etc/passwd


3====>(&& ||)
        awk -F: '$3>10 && $3<20' /etc/passwd   打印出UID在10-20之间的数
        awk -F: '$3>1000 || $3<10' /etc/passwd   打印出UID大于1000和UID小于10的数

seq 20000 | awk '$1%3==0' | wc -l

seq 20000 | awk '$1%3==0' | wc -l

awk -v (定义一个变量) 变量

如: awk -F: -v y=$i '$1==y{print $1,$2}' /etc/shadow  用户名密码
vim /shell1/用户名和密码.sh
x=`awk -F: '/bash$/{print $1} /etc/passwd'`
for i in $x
do
    awk -F: -v y=$i '$i==y{print $1,$2}' /etc/shadow
done



awk 支持if ,for,while,break,continue  属于awk的指令{}
 if   1.单分支  if(判断){指令}
           如:统计/etc/passwd文件中UID小于或等于1000的用户个数
               awk -F: '{if($3<=1000){i++}}END{print i}' /etc/passwd
               awk -F: '{if($3>=1000){i++}}END{print i}' /etc/passwd
               awk -F: '{if($7~/bash$/){i++}}END{print i}' /etc/passwd
          2.双分支  if(判断){指令}else{指令}
       


https://github.com/redhatedu/course
题目
素材




























