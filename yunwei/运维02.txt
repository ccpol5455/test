


LNMP(linux,nginx,mysql,php)动态网站
mysql=mariadb
php,java,python,perl


静态网站(图片)html,txt,doc,jpg,mp3,mp4  你要什么给你什么
动态网站      shell(a.sh:date 代码需要在服务器上执行一次)
                  a.sh----->bash
                  a.php----->php
                  a.jsp----->java
client-------->nginx(走http协议的一个共享服务器)
               相当于共享这个目录/usr/local/nginx/html
如: smb://ip------------------>samba[/common]
   ftp://ip------------------>ftp[/var/ftp]


nginx动静分离
client-----------nginx
    if判断，如果用户访问的是静态页面，则直接返回
client-----------nginx------php     
    if判断，如果用户访问的php$的文件，则转发给php，php执行代码，并把结果给nginx，nginx把结果给用户




案例1：部署LNMP环境

步骤一：安装软件

操作过程中需要安装的软件列表如下：
nginx
mariadb、mariadb-server、mariadb-devel
php、php-fpm、php-mysql

1）使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel

2）源码安装Nginx
[root@proxy ~]# useradd –s /sbin/nologin  nginx
[root@proxy ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --prefix=/usr/local/nginx    \
> --user=nginx   --group=nginx \
> --with-http_ssl_module
[root@proxy ~]# make && make install
.. ..

3）安装MariaDB
Mariadb在新版RHEL7光盘中包含有该软件，配置yum源后可以直接使用yum安装：
[root@proxy ~]# yum –y install   mariadb   mariadb-server   mariadb-devel

4）php和php-fpm(该软件包在lnmp_soft中提供)
[root@proxy ~]# yum –y  install  php   php-mysql
[root@proxy ~]# yum –y  localinstall php-fpm-5.4.16-42.el7.x86_64.rpm


步骤二：启动服务

1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@proxy ~]# systemctl stop httpd                //如果该服务存在则关闭该服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx             //启动Nginx服务
[root@proxy ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         

2）启动MySQL服务
[root@proxy ~]# systemctl start mariadb
[root@proxy ~]# systemctl status mariadb
[root@proxy ~]# systemctl enable mariadb

3）启动PHP-FPM服务
[root@proxy ~]# systemctl start php-fpm
[root@proxy ~]# systemctl status php-fpm
[root@proxy ~]# systemctl enable php-fpm

4）设置防火墙与SELinux
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
[root@proxy ~]# setenforce 0



每加1个消耗25M内存

location匹配用户的地址栏(能实现判断，支持正则)

location / {       访问/ 能匹配所有一切 优先级最低
   allow all;
   root html;
}   
location /a {      访问/a
   deny 1.1.1.1;
   allow all;
}
location /b {      访问/b
   deny all;       拒绝所有
}
location /c {      访问/c
   allow all       允许所有
}
用户访问：
#firefox http://www.a.com/  
#firefox http://www.a.com/a 
#firefox http://www.a.com/b 
#firefox http://www.a.com/c 

动静分离：至少两个location
location / {
     root html;
}
location ~ \.php${
      转发127.0.0.1:9000;
}
用户访问：
#firefox http://www.a.com/
#firefox http://www.a.com/a.html
#firefox http://www.a.com/a.doc
#firefox http://www.a.com/a.php

案例2：构建LNMP平台

php-fpm需要修改的常见配置如下：
[root@proxy etc]# vim /etc/php-fpm.d/www.conf
[www]
listen = 127.0.0.1:9000            //PHP端口号
pm.max_children = 32                //最大进程数量
pm.start_servers = 15                //最小进程数量
pm.min_spare_servers = 5            //最少需要几个空闲着的进程
pm.max_spare_servers = 32            //最多允许几个进程处于空闲状态	


步骤一：创建并修改php-fpm配置文件

1）查看php-fpm配置文件
[root@proxy etc]# vim /etc/php-fpm.d/www.conf
[www]
listen = 127.0.0.1:9000
listen.allowed_clients = 127.0.0.1
user = apache
group = apache
pm = dynamic
pm.max_children = 50
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 35

2）确认php-fpm服务已经启动
[root@proxy ~]# systemctl restart php-fpm
[root@proxy ~]# systemctl status php-fpm

步骤二：修改Nginx配置文件并启动服务

[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload


步骤三：创建PHP页面，测试LNMP架构能否解析PHP页面

1）创建PHP测试页面1，可以参考lnmp_soft/php_scripts/test.php：
[root@proxy ~]# vim /usr/local/nginx/html/test1.php
<?php
$i="This is a test Page";
echo $i;
?>

LNMP常见问题
1.出现下载页面【没有动静分离】
2.An error occurred 有一个错误 (/error.log【Connection refused连接端口失败】)
 查看nginx的日志 tailf /usr/local/nginx/logs  /access.log  网关日志   访问一次出现一次
                                            /error.log   报错日志(有错误才能出现)   出现一次错误出现一次

报错日志一般出现内容：2018/04/03 14:13:17 [error] 8718#0: *154 connect() failed (111: Connection refused) while connecting to upstream, client: 192.168.4.254, server: www.aa.com, request: "GET /test.php HTTP/1.1", upstream: "fastcgi://127.0.0.1:9000", host: "192.168.4.5"

3.空白页面  nginx日志没有错误，查看php-fpm的日志【syntax error语法错误】
 查看php-fpm的日志：  tailf /var/log/php-fpm/www-error.log  报错日志（有错误才会出现）

报错日志一般出现内容：[03-Apr-2018 06:23:49 UTC] PHP Parse error:  syntax error, unexpected 'echo' (T_ECHO) in /usr/local/nginx/html/test.php on line 3

4.File not found(没有页面文件)
   地址打错了，如http://192.168.4.5/test2.php

systemcli  disble httpd  开机不自启
systemcli  enable httpd  开机自启

LNMP linux--ningix--PHP--Mysql(Mariadb)
有数据需要存储--->txt,doc,excel,mysql
例如：
一、小型项目，没有必要用到mysql   放到mysql里要用select
周考系统(迷你web)：
1.题10-20
2.答案excel 
二、大型项目
天猫用户(6亿左右的用户)
用excel存储的话差不多就10G了，打开就需要很久，所有应该用Mysql数据库

php----->mysql

2）创建PHP测试页面,连接并查询MariaDB数据库。
可以参考lnmp_soft/php_scripts/mysql.php:
[root@proxy ~]# vim /usr/local/nginx/html/test2.php
<?php
$mysqli = new mysqli('localhost','root','密码','mysql');
//注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
if (mysqli_connect_errno()){
    die('Unable to connect!'). mysqli_connect_error();
}
$sql = "select * from user";
$result = $mysqli->query($sql);
while($row = $result->fetch_array()){
    printf("Host:%s",$row[0]);
    printf("</br>");
    printf("Name:%s",$row[1]);
    printf("</br>");
}
?>

3）客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
[root@client ~]# firefox http://192.168.4.5/test1.php
[root@client ~]# firefox http://192.168.4.5/test2.php

开启mysql服务：systemcli start mariadb
firefox http://192.168.4.5/mysql.php
Host:localhost
Name:root
Host:proxy
Name:root
Host:127.0.0.1
Name:root
Host:::1
Name:root
Host:localhost
Name:
Host:proxy
Name:

没有开启mysql服务：systemcli stop mariadb
firefox http://192.168.4.5/mysql.php
Unable to connect!

LNMP
1.linux
2.nginx,mariadb,php,php-fpm

client(用户)------>nginx(动静分离)------>php-fpm----->mysql
                        修改配置文件
测试简单的动态网站不需要mysql,复杂的动态网络需要mysql


案例3：地址重写
如：www.360buy.com调转到www.jd.com
    www.360.com调转到www.360.cn

原因：
1.http://www.xx.com/a.jpg ------> http://www.xx.com/b.jpg 
  把原文件删除或者移动了，应该报错找不到，可以让网站调转到一个替代的网站或者主页
2.http://www.360buy.com  ------>  http://www.jd.com
  在网站上和微商上发广告，中途域名变了，以前的连接进不去了，可以让他跳到京东
   (360投资的电影 美人鱼 里面有很多的360广告)
3./usr/local/nginx/html/a/b/c/d/e/f/x.jpg
  http://192.168.4.5/a/b/c/d/e/f/x.jpg
http://192.168.4.5/x.jpg -----> http://192.168.4.5/a/b/c/d/e/f/x.jpg
  当一个文件在多了文件夹下时，用户访问的时候，可以直接调转到多了文件夹下看到文件

rewrite 旧的地址栏  新的地址栏 (flag)

步骤一：修改配置文件(访问a.html重定向到b.html)

1）修改Nginx服务配置：
[root@proxy ~]# echo "BBB" > /usr/local/nginx/html/b.html(没有a.html)
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
        listen       80;
        server_name  localhost;
location / {
    root   html;
index  index.html index.htm;
(1)rewrite /a.html  /b.html;
#http://192.168.4.5/a.html--------->http://192.168.4.5/a.html     
(2)rewrite /a.html /b.html redirect;
#http://192.168.4.5/a.html----------->http://192.168.4.5/b.html
#(支持正则表达式 .表示任意字符，所以a"c"html--->b.html，
   将/a.html-->/a\.html就只能是a.html---->b.html)
}
}
2）重新加载配置文件
[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload

3）客户端测试
[root@client ~]# firefox  http://192.168.4.5/a.html
                   访问a.html出现的时b.html

步骤三：修改配置文件(访问192.168.4.5的请求重定向至www.tmooc.cn)

1) 修改Nginx服务配置
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
        listen       80;
        server_name  localhost;
rewrite ^/ http://www.tmooc.cn/;
#(^/只要是根开始的域名，都调转到http://www.tmooc.cn/
  http://192.168.4.5/         ------>http://www.tmooc.cn/
  http://192.168.4.5/a/b/c    ------>http://www.tmooc.cn/
  http://192.168.4.5/a.html   ------>http://www.tmooc.cn/
  http://192.168.4.5/c/d/f.html----->http://www.tmooc.cn/)
rewrite ^/(.*) http://www.jd.com/$1;
#(正则表达式：保留【\(abc\)\(ttt\) \1 \2   (abc)(ttt) \1 \2】
  http://192.168.4.5/aaa ------> http://www.tmooc.cn/aaa
  http://192.168.4.5/chongqi --------> http://www.tmooc.cn/chongqi
  前面有(.*)(.*)(.*)，后面跟$1,$2,$3.......)
location / {
    root   html;
index  index.html index.htm;
# rewrite /a.html  /b.html  redirect;
}
}

2）重新加载配置文件
[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload

3）客户端测试
[root@client ~]# firefox  http://192.168.4.5



手机：www.sina.com  窄屏
电脑：www.sina.com  宽屏

日志：
192.168.4.100 - heihei [02/Apr/2018:16:14:32 +0800] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"

访问地址(192.168.4.100)  常量(-)  用户名(heihei)  时间([02/Apr/2018:16:14:32 +0800])  请求的页面看的什么页面(GET / HTTP/1.1)  200一切正常404没找到(200)
访问的页面有多少字节(612)  对方的操作系统(Linux x86_64)   浏览器(Firefox/52.0)

log_format  main  '$remote_addr - $remote_user [$time_local]"$request" ' '$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"';

/usr/local/nginx/hrml/电脑版a.html
/usr/local/nginx/html/andriod/手机版a.html
if(如果)$http_user_agent找到uc{
     rewrite ^/(.*) /andriod/$1;
       }
电脑：http://192.168.4.5/a.html
UC手机版：http://192.168.4.5/b.html

UC---->设置------->浏览设置------>UA(用户标示)：电脑，手机
    (可以伪装 手机看电脑版的UC)

实现不同的浏览器访问相同的页面，结果不一样
如：
步骤三：修改配置文件(实现curl和火狐访问相同链接返回的页面不同)

1) 创建网页目录以及对应的页面文件：
[root@proxy ~]# echo "I am Normal page" > /usr/local/nginx/html/test.html
[root@proxy ~]# mkdir  -p  /usr/local/nginx/html/firefox/
[root@proxy ~]# echo "firefox page" > /usr/local/nginx/html/firefox/test.html

2) 修改Nginx服务配置
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
        listen       80;
        server_name  localhost;
location / {
    root   html;
index  index.html index.htm;
}
if ($http_user_agent ~* firefox) {            
#(识别客户端firefox浏览器                  ~正则匹配，      *不区分大小写
   $http_user_adent ~* firefox|uc|.....)
rewrite ^(.*)$ /firefox/$1 ;
}
}

3）重新加载配置文件
[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload

4）客户端测试
[root@client ~]# firefox  http://192.168.4.5/test.html
[root@client ~]# curl     http://192.168.4.5/test.html


    
























































