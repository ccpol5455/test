

服务                            端口号
nginx                    80
systemctl start mariadb  3306
systemctl start php-fpm  9000


netstat   网络状态查看器   (ss)
-a   所有连接
-t   tcp连接
-u   udp连接
-n   数字显示
-p   显示对应程序的名称

rewrite 旧地址  新地址 【选项】;
last         不再读其他rewrite
break        不再读其他语句，结束请求
redirect     临时重定向
permament    永久重定向

rewrite a b (last 不再往下读了，仅当人访问a的时候)
            (break 不再往下读了，a跳到b就彻底结束了)
            (redirect a跳到b是临时的，以后a还能访问)
            (permament a跳到b是永久的，以后a不能访问);
rewrite b c (同上);
rewrite c d (同上);
这样可以一直玩下去

baidu
蜘蛛spider：在互联网中找网站
比如:搜到了一个袜子(a.html)的网站，就写自己的数据库文件，
     以后在百度里搜袜子就出现这个页面，
     袜子以前是a.html,现在跳到b.html  permanent,就修改数据库，
                                          下次来的时候发现是a.html,就把数据删除了
                                  redirect,就不修改数据库
	                                  下次来的时候发现还是b.html,就把数据删除了


~     正则匹配
~*    不区分大小写


案例1：Nginx反向代理 调度器 代理服务器
web的高可用

步骤一：部署实施后端Web服务器

1）部署后端Web1服务器
后端Web服务器可以简单使用yum方式安装httpd实现Web服务，为了可以看出后端服务器的不同，可以将两台后端服务器的首页文档内容设置为不同的内容。
[root@web1 ~]# yum  -y  install  httpd
[root@web1 ~]# echo "192.168.2.100" > /var/www/html/index.html
[root@web1 ~]# systemctl restart httpd
[root@web1 ~]# firewall-cmd --set-default-zone=trusted

2）部署后端Web2服务器
[root@web2 ~]# yum  -y  install  httpd
[root@web2 ~]# echo "192.168.2.200" > /var/www/html/index.html
[root@web2 ~]# systemctl restart httpd
[root@web2 ~]# firewall-cmd --set-default-zone=trusted


步骤二：配置Nginx服务器，添加服务器池，实现反向代理功能

1）修改/usr/local/nginx/conf/nginx.conf配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
upstream webserver {         (加集群)
                server 192.168.2.100:80;
                server 192.168.2.200:80;
        }
.. ..
server {
        listen        80;
        server_name  www.tarena.com;
            location / {
            proxy_pass http://webserver;
        }
}

2）重启nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx –s reload

3）客户端使用浏览器访问代理服务器测试轮询效果
[root@client ~]# curl http://192.168.4.5            //使用该命令多次访问查看效果


步骤二：配置upstream服务器集群池属性

1）设置失败次数，超时时间，权重
weight可以设置后台服务器的权重，max_fails可以设置后台服务器的失败次数，fail_timeout可以设置后台服务器的失败超时时间。
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
upstream webserver {
     ip_hash;(相同客户端访问相同Web服务器)
     server 192.168.2.100 weight= max_fails= fail_timeout=;
  (weight=数字，数字是多少，进入多少次，不设置为1 ，比如10个人访问，上面那个设置weight=2，则进入2.100的有7次，2.200的有3次
   max_fails=n，访问服务器失败的次数，最大尝试n次，连接n次，失败后看下一个
   fail_timeout=ns，失败时候的超时时间，ns不找你，ns之后在访问这台服务器) 
     server 192.168.2.200 weight= max_fails= fail_timeout=;
        }
.. ..
server {
        listen        80;
        server_name  www.tarena.com;
            location / {
            proxy_pass http://webserver;
        }
}

2）重启nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx –s reload

3）关闭一台后端服务器
[root@web1 ~]# systemctl stop httpd

4）客户端使用浏览器访问代理服务器测试轮询效果
[root@client ~]# curl http://192.168.4.5            
//使用该命令多次访问查看效果

5）修改后端服务器的httpd
[root@web1 ~]# systemctl start httpd

6）客户端再次使用浏览器访问代理服务器测试轮询效果
[root@client ~]# curl http://192.168.4.5            
//使用该命令多次访问查看效果

后台必须是http协议的网站


案例2：Nginx的TCP/UDP调度器


--prefix=/usr/local/nginx --user=nginx --group=nginx 
--with-http_ssl_module --with-stream


步骤一：部署支持4层TCP/UDP代理的Nginx服务器

1）部署nginx服务器
编译安装必须要使用--with-stream参数开启4层代理模块。
[root@proxy ~]# yum –y install gcc pcre-devel openssl-devel        //安装依赖包
[root@proxy ~]# tar  -xf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                        //开启SSL加密功能
> --with-stream                                //开启4层反向代理功能
  .. ..
nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/logs/nginx.pid"
  nginx error log file: "/usr/local/nginx/logs/error.log"
  nginx http access log file: "/usr/local/nginx/logs/access.log"
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"
[root@proxy nginx-1.12.2]# make && make install    //编译并安装

步骤二：配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能

1）修改/usr/local/nginx/conf/nginx.conf配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
stream {
            upstream backend {
               server 192.168.2.100:22;            //后端SSH服务器的IP和端口
               server 192.168.2.200:22;
}
            server {
                listen 12345;                    //Nginx监听的端口
                proxy_connect_timeout 1s;
                proxy_timeout 3s;
                 proxy_pass backend;
             }
}
http {
.. ..
}

2）重启nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx –s reload

3）客户端使用访问代理服务器测试轮询效果
[root@client ~]# ssh 192.168.4.5 -p 12345            
       //使用该命令多次访问查看效果


案例3：Nginx常见问题处理

1.不显示Nginx软件版本号
2.如果客户端访问服务器提示“Too many open files”如何解决
3.如何解决客户端访问头部信息过长的问题
4.如何让客户端浏览器缓存数据
5.如何自定义返回给客户端的404错误页面
6.如何查看服务器状态信息
7.开启gzip压缩功能，提高数据传输效率

curl -I http://192.168.4.5  相当于  firefox F12

步骤一：屏蔽服务器版本号信息

1）优化前客户端测试服务器版本号信息
[root@client ~]# curl -I http://192.168.4.5
...
Server: nginx/1.12.2
...

2）修改Nginx配置文件，屏蔽版本信息
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
       server_tokens off;                    //不显示nginx版本号信息
.. ..
}
[root@proxy ~]# nginx -s reload

3）优化后客户端测试服务器版本号信息
[root@client ~]# curl -I http://192.168.4.5
...
Server: nginx
...


步骤二：优化Nginx并发量

1）优化前使用ab高并发测试
[root@proxy ~]# ab –n 2000 –c 2000 http://192.168.4.5/
Benchmarking 192.168.4.5 (be patient)
socket: Too many open files (24)                //提示打开文件数量过多

2）修改Nginx配置文件，增加并发量
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
worker_processes  2;                    //与CPU核心数量一致
events {
worker_connections 65535;        //每个worker最大并发连接数
use epoll;
}
.. ..
[root@proxy ~]# nginx -s reload

3）优化Linux内核参数（最大文件数量）
[root@proxy ~]# ulimit –Hn 100000  (临时生效)
[root@proxy ~]# ulimit –Sn 100000  (临时生效)
[root@proxy ~]# vim /etc/security/limits.conf(永久生效)
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000

4）优化后测试服务器并发量
[root@proxy ~]# ab –n 2000 –c 2000 http://192.168.4.5/

ulimit -a open files----->1024 只能打开1024个文件
如：
samba
vim smb.conf
[common]
path=/common
write_list=tom
chmod 777 /common

cat /proc/cpuinfo
lscpu


步骤三：优化Nginx数据包头缓存

1）优化前，使用脚本测试长头部请求是否能获得响应
[root@proxy ~]# cat lnmp_soft/buffer.sh 
#!/bin/bash
URL=http://192.168.4.5/index.html?
for i in {1..5000}
do
    URL=${URL}v$i=$i
done
curl $URL                                //经过5000次循环后，生成一个长的URL地址栏
[root@proxy ~]# ./buffer.sh
.. ..
<center><h1>414 Request-URI Too Large</h1></center>       
           //提示头部信息过大

2）修改Nginx配置文件，增加数据包头部缓存大小
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
client_header_buffer_size    1k;        //默认请求包头信息的缓存    
large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
.. ..
}
[root@proxy ~]# nginx -s reload

3）优化后，使用脚本测试长头部请求是否能获得响应
[root@proxy ~]#cat cat buffer.sh 
#!/bin/bash
URL=http://192.168.4.5/index.html?
for i in {1..5000}
do
    URL=${URL}v$i=$i
done
curl $URL
[root@proxy ~]# ./buffer.sh

步骤四：浏览器本地缓存静态数据


                                              |
client---------------nginx----------|
                                              |

firefox-|
ie------|
chrome--|
baidu---|--------都有本地缓存(会出现缓存过期，不适合动态数据)
qq------|                   适合图片视频
360----------|

缓存过期：
如:一个网站上手表卖500，过一段时间改成5000了下次访问就不能直接显示5000，显示的500)
1）使用Firefox浏览器查看缓存
以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息，如图-3所示，点击List Cache Entries可以查看详细信息。


2）清空firefox本地缓存数据


3)修改Nginx配置文件，定义对静态页面的缓存时间
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
expires        30d;            //定义客户端缓存时间为30天
}
}
[root@proxy ~]# cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
[root@proxy ~]# nginx –s reload

4）优化后，使用Firefox浏览器访问图片，再次查看缓存信息
[root@client ~]# firefox http://192.168.4.5/day.jpg



步骤五：自定义报错页面

1）优化前，客户端使用浏览器访问不存在的页面，会提示404文件未找到
[root@client ~]# firefox http://192.168.4.5/xxxxx        //访问一个不存在的页面

2）修改Nginx配置文件，自定义报错页面
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
error_page   404  /40x.html;    //自定义错误页面
.. ..
[root@proxy ~]# vim /usr/local/nginx/html/40x.html        //生成错误页面
Oops,No NO no page …
[root@proxy ~]# nginx –s reload

3）优化后，客户端使用浏览器访问不存在的页面，会提示自己定义的40x.html页面
[root@client ~]# firefox http://192.168.4.5/xxxxx        //访问一个不存在的页面

步骤六：如何查看服务器状态信息

1）编译安装时使用--with-http_stub_status_module开启状态页面模块
[root@proxy ~]# yum -y install gcc pcre-devel openssl-devel        //安装常见依赖包
[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                        //开启SSL加密功能
> --with-stream                                //开启TCP/UDP代理模块
> --with-http_stub_status_module                //开启status状态页面
[root@proxy nginx-1.12.2]# make && make install    //编译并安装

2）修改Nginx配置文件，定义状态页面
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
… …
location /status {
                stub_status on;
        }
… …
[root@proxy ~]# nginx

2）优化后，查看状态页面信息
[root@proxy ~]# curl  http://192.168.4.5/status
Active connections: 1 
server accepts handled requests
 10 10 3 
Reading: 0 Writing: 1 Waiting: 0
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。

步骤七：对页面进行压缩处理

1）修改Nginx配置文件
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
http {
.. ..
gzip on;                            //开启压缩
gzip_min_length 1000;                //小文件不压缩
gzip_comp_level 4;                //压缩比率
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                    //对特定文件压缩，类型参考mime.types
.. ..
}








































